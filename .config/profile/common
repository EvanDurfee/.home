#!/bin/sh

# This represents a universal config file for environment setup and preferences.
# Load this with a login shell.
# To override, create an overrides file which will be sourced at the end.

# Source this file
# ln -s ~/.config/profile/common ~/.profile
# OR
# ~/.profile: [ -e "~/.config/profile/common" ] && . "~/.config/profile/common"
# "$ZDOTDIR"/.zprofile: [ -e ~/.profile ] && emulate sh -c 'source ~/.profile'

# add .local/bin to path
export PATH="$PATH:$HOME/.local/bin"

# defaults
export EDITOR="nano"
export TERMINAL="tilix"
export BROWSER="firefox"
export KUBE_EDITOR="gedit"

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

## ~/ cleanup (may need to create these folders / files manually)
# Check here for updates: https://wiki.archlinux.org/index.php/XDG_Base_Directory

# anaconda (python)
export CONDARC="$XDG_CONFIG_HOME/conda/condarc"

# Anki
# Anki is natively supported now, according to https://apps.ankiweb.net/docs/manual20.html#file-locations

# Atom
export ATOM_HOME="$XDG_DATA_HOME"/atom

# Bash Completion
export BASH_COMPLETION_USER_FILE="$XDG_CONFIG_HOME"/bash-completion/bash_completion

# Ruby bundler
export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME"/bundle
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME"/bundle
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME"/bundle

# Rust cargo
export CARGO_HOME="$XDG_DATA_HOME"/cargo

# Conky
# Conky is natively supported now

# Docker
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"

# GDB
#if which gdb >/dev/null 2>&1; then
#	gdb () {
#		"$(which gdb)" -nh -x "$XDG_CONFIG_HOME"/gdb/init "$@"
#	}
#}

# GnupPG
# May not work completely, see wiki if issues arise
export GNUPGHOME="$XDG_DATA_HOME/gnupg"

# GoLang
export GOPATH="$XDG_DATA_HOME"/go

# Gradle
export GRADLE_USER_HOME="$XDG_DATA_HOME"/gradle

# GTK
export GTK_RC_FILES="$XDG_CONFIG_HOME"/gtk-1.0/gtkrc
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc

# Java (OpenJDK)
# export _JAVA_OPTIONS=-Djava.util.prefs.userRoot="$XDG_CONFIG_HOME"/java

# KDE
export KDEHOME="$XDG_CONFIG_HOME"/kde

# Kodi
export KODI_DATA="$XDG_DATA_HOME/kodi"

# Kubectl
export KUBECONFIG="$XDG_CONFIG_HOME"/kube/config

# Less
mkdir -p "$XDG_CACHE_HOME"/less
export LESSHISTFILE="$XDG_CACHE_HOME/less/history"
export LESSKEY="$XDG_DATA_HOME/less/lesskey"

# LibX11
export XCOMPOSEFILE="$XDG_CONFIG_HOME"/X11/xcompose
export XCOMPOSECACHE="$XDG_CACHE_HOME"/X11/xcompose

# Maven
# More work than it's worth to change (other apps may still use .m2 anyway)
# Cannot be set via env; requires the settings flag and the following settings:
# <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
#       xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
# <localRepository>${env.XDG_DATA_HOME}/maven</localRepository>
# </settings>
# if which mvn >/dev/null 2>&1; then
# 	mvn () {
# 		"$(which mvn)" -gs "$XDG_CONFIG_HOME"/maven/settings.xml
# 	}
# }

# NodeJS
export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node_repl_history

# npm
# Requires the following npmrc content:
# prefix=${XDG_DATA_HOME}/npm
# cache=${XDG_CACHE_HOME}/npm
# tmp=${XDG_RUNTIME_DIR}/npm
# init-module=${XDG_CONFIG_HOME}/npm/config/npm-init.js
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME"/npm/npmrc

# Nuget
export NUGET_PACKAGES="$XDG_CACHE_HOME"/NuGetPackages

# NVM
export NVM_DIR="$XDG_DATA_HOME"/nvm

# pass
export PASSWORD_STORE_DIR="$XDG_DATA_HOME/password-store"

# PSQL
mkdir -p "$XDG_CONFIG_HOME/pg"
mkdir -p "$XDG_CACHE_HOME/pg"
export PSQLRC="$XDG_CONFIG_HOME/pg/psqlrc"
export PSQL_HISTORY="$XDG_CACHE_HOME/pg/psql_history"
export PGPASSFILE="$XDG_CONFIG_HOME/pg/pgpass"
export PGSERVICEFILE="$XDG_CONFIG_HOME/pg/pg_service.conf"

# Python
export PYTHON_EGG_CACHE="$XDG_CACHE_HOME"/python-eggs
export PYLINTHOME="$XDG_CACHE_HOME"/pylint

# GNU Readline
export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

# Ruby Gems
# may need to remove 'gem --user-install' from /etc/gemrc (dangerous if multiple users), or disable it in local ~/.gemrc
export GEM_HOME="$XDG_DATA_HOME"/gem
export GEM_SPEC_CACHE="$XDG_CACHE_HOME"/gem

# Rust up
export RUSTUP_HOME="$XDG_DATA_HOME"/rustup

# SBT
# more work than it's worth to fix, due to dependent tools

# Teamspeak
export TS3_CONFIG_DIR="$XDG_CONFIG_HOME/ts3client"

# GNU Screen
export SCREENRC="$XDG_CONFIG_HOME"/screen/screenrc

# vale
#if which vale >/dev/null 2>&1; then
#	vale () {
#		"$(which vale)" --config "$XDG_CONFIG_HOME/vale/config.ini" "$@"
#	}
#}

# Vim (requires specific content in VIMRC, see the wiki)
export VIMINIT='source "$XDG_CONFIG_HOME/vim/vimrc"'

# wget
# Add to wgetrc: hsts-file="$XDG_CACHE_HOME"/wget-hsts
export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"

# Wine
mkdir -p "$XDG_DATA_HOME"/wineprefixes
export WINEPREFIX="$XDG_DATA_HOME"/wineprefixes/default

# Overrides
[ -e "$XDG_CONFIG_HOME/profile/override" ] && . "$XDG_CONFIG_HOME/profile/override"



## Other
export CALIBRE_USE_SYSTEM_THEME=0
export CALIBRE_USE_DARK_PALETTE=1
